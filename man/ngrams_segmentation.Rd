% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ngrams_segmentation.R
\name{ngrams_segmentation}
\alias{ngrams_segmentation}
\title{Segmenting hashtag with n-grams.}
\usage{
ngrams_segmentation(
  sequences,
  texts,
  clean = TRUE,
  ngram_min = 1,
  ngram_max = 5,
  retrieve = "most-scored",
  simplify = TRUE,
  omit_zero = TRUE,
  score_formula = "points / words.number ^ 2"
)
}
\arguments{
\item{sequences}{character vector, sequence to be segmented, either with '#' (e.g., hashtag)
or without it.}

\item{texts}{data.frame, containing ids, words to search, words to use
for segmentation, and their points. See details.}

\item{clean}{character vector of length 1, the type of the result
data.frame to be returned:
'all', 'first-shortest', 'most-pointed' or 'most-scored'.
See value section.}

\item{ngram_min}{logical, if adjacent numbers should be merged into one,
and underscores removed. See simplification section.}

\item{ngram_max}{logical, if words with 0 points should be omitted
from word count. See simplification section.}

\item{collapse_ciphers}{character vector of length 1, with formula
to calculate score.}
}
\value{
The output always will be data.frame. If \code{retrieve='all'}
is used, then the return will include all possible segmentation
of the given hashtag.\cr
If \code{retrieve='first-shortest'} is used, the first of the shortest
segmentations (with respect to the order of word's appearance
in the dictionary, 1 row).\cr
If \code{retrieve='most-pointed'} is used, segmentation with most total
points is returned (1 row).\cr
If \code{retrieve='most-scored'} is used, segmentation with the highest
score calculated as \cr \eqn{score = points / words.number ^ 2}
}
\description{
\code{unigram_sequence_segmentation} returns the data.frame containing hashtag,
its segmented version, ids of dictionary words,
number of words it have taken to segment the hashtag,
total number of points, and computed score.
}
\details{
This function is not intendend for long strings segmentation -
140 characters should be considered too long
and may take hours to complete. 15 characters takes about 0.02s,
30 characters about 0.03s.
}
\section{Dictionary}{

Dictionary has to be data.frame with three named columns: 1) word, 2) id,
3) points.\cr
"word" should be column of type character, containing unigram. Word case
might be used.\cr
"id" should be column of type numeric, containing id of unigram.\cr
"points" should be column of type numeric, containing number of points
for the word - the higher, the better. Unigrams with 0 points might be
removed from the wordcount with omit.simplified argument.
}

\section{Simplification}{

Two arguments are possible for simplification:\cr
\itemize{
\item simplify - removes spaces between numbers and removes underscores,\cr
\item omit_zero - removes ids of 0-pointed unigrams,
and omits them in the word count.\cr
By deafult segmented hashtag will be simplified,
and numbers and underscores will be removed from word count
for score computing, since they are neutral as they are necessary.
}
}

\examples{
  unigram_sequence_segmentation('#thisisscience')
  unigram_sequence_segmentation('#this_is_science')
  unigram_sequence_segmentation('#thisisscience2020')
  unigram_sequence_segmentation('#thisisscience2020', simplify=FALSE,
  omit_zero=FALSE)

}
